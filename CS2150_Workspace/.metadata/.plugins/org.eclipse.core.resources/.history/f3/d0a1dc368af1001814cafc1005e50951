/* Lab5.java
 * A simple scene consisting of a lit house and a textured ground plane
 * 27/08/2007
 * 
 * Scene Graph:
 *  Scene origin
 *  |
 *  +-- [S(20,1,20) T(0,-1,-10)] Ground plane
 *  |
 *  +-- [S(20,1,10) Rx(90) T(0,4,-20)] Sky plane
 *  |
 *  +-- [T(4,7,-19)] Sun
 *  |
 *  +-- [Ry(35) S(2,2,2) T(-2.5,0,-10)] House
 *      |
 *      +-- [S(1,0.5,1) T(0,0.75,0)] Roof
 */
package Lab5;
import org.lwjgl.opengl.GL11;
import org.lwjgl.util.glu.Sphere;
import org.newdawn.slick.opengl.Texture;

import GraphicsLab.*;

/**
 * This sample demonstrates the use of OpenGL quadrics and textures to enhance both the
 * content and appearance of a 3D scene 
 * 
 * <p>Controls:
 * <ul>
 * <li>Press the escape key to exit the application.
 * <li>Hold the x, y and z keys to view the scene along the x, y and z axis, respectively
 * <li>While viewing the scene along the x, y or z axis, use the up and down cursor keys
 *      to increase or decrease the viewpoint's distance from the scene origin
 * </ul>
 *
 * <p>Adapted from Mark Bernard's LWJGL NeHe samples
 *
 * @author Anthony Jones and Dan Cornford
 */
public class Lab5 extends GraphicsLab
{    
    public static void main(String args[])
    {
    	new Lab5().run(WINDOWED,"Lab 5 - Quadrics & Textures",0.01f);
    }

    protected void initScene() throws Exception
    {
    }
    
    protected void checkSceneInput()
    {
    }
    protected void updateScene()
    {
    }
    protected void renderScene()
    {
    	
    }
    protected void cleanupScene()
    {
    }
    private void drawUnit()
    {
    	Vertex v1 = new Vertex(0f, -0.5f, 0.5f);
		Vertex v2 = new Vertex(0.5f, 0f, 0.5f);
		Vertex v3 = new Vertex(0f, 0.5f, 0.5f);
		Vertex v4 = new Vertex(-0.5f, 0f, 0.5f);
		
		Vertex v5 = new Vertex(0f, -0.5f, -0.5f);
		Vertex v6 = new Vertex(0.5f, 0f, -0.5f);
		Vertex v7 = new Vertex(0f, 0.5f, -0.5f);
		Vertex v8 = new Vertex(-0.5f, 0f, -0.5f);

		GL11.glBegin(GL11.GL_POLYGON);
		{
			v1.submit();
			v2.submit();
			v3.submit();
			v4.submit();
			
		}
		GL11.glEnd();
		
		GL11.glBegin(GL11.GL_POLYGON);
		{
			v5.submit();
			v6.submit();
			v7.submit();
			v8.submit();
			
		}
		GL11.glEnd();
		
		GL11.glBegin(GL11.GL_POLYGON);
		{
			v2.submit();
			v6.submit();
			v7.submit();
			v3.submit();
			
		}
		GL11.glEnd();
		
		GL11.glBegin(GL11.GL_POLYGON);
		{
			v1.submit();
			v5.submit();
			v6.submit();
			v2.submit();
			
		}
		GL11.glEnd();
		
		GL11.glBegin(GL11.GL_POLYGON);
		{
			v1.submit();
			v5.submit();
			v6.submit();
			v8.submit();
			
		}
		GL11.glEnd();
		
		GL11.glBegin(GL11.GL_POLYGON);
		{
			v8.submit();
			v7.submit();
			v3.submit();
			v4.submit();
			
		}
		GL11.glEnd();
    }
}
